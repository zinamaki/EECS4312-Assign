Isolette[delta:posreal]: THEORY

BEGIN
importing Time[delta]

%monitored variables
i: VAR DTIME
m_tm: [DTIME -> {n:real| n >= 68.0 AND n <= 105.0}] % current temperature of isolette
m_dl: [DTIME -> {n:integer | n >= 97 AND n <= 99}]  % desired lower temparature by operator
m_dh: [DTIME -> {n:integer | n >= 98 AND n <= 100}] % desired higher temperature by operator
m_al: [DTIME -> {n:integer | n>= 93 AND n <= 98}] % lower alarm temperature set by operator
m_ah: [DTIME -> {n:integer | n>= 99 AND n <= 103}] % higher alarm temperature set by operator
m_st: TYPE = {valid, invalid} % status of sensor and operator settings
m_sw: TYPE = {on, off} % switch set by operator

HEAT:TYPE = {on, off}
c_hc: [DTIME -> HEAT] % heat control: command to turn heat source on or off
c_td:[DTIME -> {n:integer | n = 0 AND n >= 68 AND n <= 105}] % Displayed temperature of isolette
alarm:TYPE = {off, on} % Sound alarm to call nurse
monitor_mode:TYPE = {off, init, normal, failed} % mode of isolette operation
c_ms:TYPE = {Danger} %messages to display to nurse
regulator_status:TYPE = {init, on, failed}
c_display: [DTIME -> integer]

c_al: [DTIME -> alarm]
c_md: [DTIME -> monitor_mode]
c_rs: [DTIME -> regulator_status] % regulator status

reg_interface_failure: [DTIME -> bool]
reg_internal_failure: [DTIME -> bool]
modes:TYPE = {init, normal,failed}
reg_mode: [DTIME -> modes]
max_response_time:int = 0.5

status_ft(i):bool=
   COND
	i = 0 -> c_md(i) = off,
	i > 0 -> COND
	    c_md(i) = init -> c_rs(i)= init,
	    c_md(i) = normal -> c_rs(i) = on AND c_display(i) = floor(i+0.5),
	    c_md(i) = failed -> c_rs(i) = failed
	ENDCOND
   ENDCOND

heat_ft(i): bool = 
   COND
	i = 0 -> c_md(i) = off AND c_hc(i) = off,
	i > 0 -> COND
	  c_md(i) = init AND m_tm(i) < m_dl(i) -> c_hc(i) = on,
	  c_md(i) = init AND m_tm(i) > m_dh(i) -> c_hc(i) = off,
	  c_md(i) = normal -> COND
	       m_tm(i) < m_dl(i) -> c_hc(i) = on,
	       m_tm(i) > m_dh(i) -> c_hc(i) = off,
	       m_tm(i) >= m_dl(i) AND m_tm(i) <= m_dh(i) -> c_hc(i) = c_hc(i-1) 
	  ENDCOND,
	  c_md(i) = failed -> c_hc(i) = off
	ENDCOND
   ENDCOND

conj₁: CONJECTURE
       FORALL (i:DTIME):
       	      m_al(i) < m_dl(i)
conj₂: CONJECTURE
       FORALL (i:DTIME):
       	      m_dl(i) < m_dh(i)
conj₃: CONJECTURE
       FORALL (i:DTIME):
       	      m_ah(i) > m_dh(i)

use_case1: bool =
   m_sw(0) = on AND c_rs(0)= init
   => 

END Isolette
